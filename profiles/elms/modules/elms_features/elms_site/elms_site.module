<?php
define('ELMS_GROUP_TYPE', 'site');
include_once('elms_site.features.inc');

/**
 * Implementation of hook_menu().
 */
function elms_site_menu() {
  $items = array();
  $items['elms_site_admin'] = array(
    'title' => 'Site settings',
    'description' => "Adjust this site's configuration options.",
    'weight' => -20,
    'access callback' => '_elms_site_admin_access',
    'access arguments' => array(),
    'page callback' => 'elms_site_settings_overview',
    'file' => 'elms_site.admin.inc',
  );
  $items['elms_site_admin/edit_site'] = array(
    'title' => 'Edit site',
    'description' => "Adjust site name and workflow settings.",
    'weight' => -20,
    'access callback' => '_elms_site_admin_access',
    'access arguments' => array(),
    'page callback' => 'elms_site_edit_site',
    'file' => 'elms_site.admin.inc',
  );
  $items['elms_site_admin/edit_features'] = array(
    'title' => 'Manage Site Features',
    'description' => "Adjust site features and settings.",
    'weight' => -20,
    'access callback' => '_elms_site_admin_access',
    'access arguments' => array(),
    'page callback' => 'elms_site_edit_features',
    'file' => 'elms_site.admin.inc',
  );
  $items['elms_site_admin/stats'] = array(
    'title' => 'Stats',
    'description' => "Statistics and overview information about your site",
    'weight' => -20,
    'access callback' => '_elms_site_admin_access',
    'access arguments' => array(),
    'page callback' => 'elms_site_og_stats',
    'file' => 'elms_site.admin.inc',
  );
  $items['elms_site_admin/import_export'] = array(
    'title' => 'Import / Export',
    'description' => "All methods of importing and exporting data",
    'weight' => -20,
    'access callback' => '_elms_site_admin_access',
    'access arguments' => array(),
    'page callback' => 'elms_site_import_settings_overview',
    'file' => 'elms_site.admin.inc',
  );
  $items['elms_site_admin/info'] = array(
    'title' => 'Site information',
    'description' => 'Details about your site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_elms_site_info_form'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => '_elms_site_admin_access',
    'access arguments' => array(),
  );
  
  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function elms_site_menu_alter(&$items) {
  // add another way of getting to theme
  $items['elms_site_admin/theme'] = $items['theme'];
  $items['elms_site_admin/theme']['description'] = "Change your site's theme and interface settings";
  unset($items['elms_site_admin/theme']['type']);
}

/**
 * Callback for access.
 */
function _elms_site_admin_access() {
  $group = og_get_group_context();
  return (og_is_group_admin($group) || user_access('administer site configuration'));
}

/**
 * Helper function for space information settings.
 */
function _elms_site_info_form($form_state, $feature = NULL) {
  $form = array();
  $form['site_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#default_value' => variable_get('site_name', ''),
    '#description' => t('The name of this space.'),
    '#required' => FALSE,
  );
  $form['site_slogan'] = array(
    '#type' => 'textfield',
    '#title' => t('Slogan'),
    '#default_value' => variable_get('site_slogan', ''),
    '#description' => t("Your group's motto, tag line, or catchphrase (often displayed alongside the title of the site)."),
  );
  $form['site_footer'] = array(
    '#type' => 'textarea',
    '#title' => t('Footer message'),
    '#default_value' => variable_get('site_footer', ''),
    '#description' => t('This text will be displayed at the bottom of each page. Useful for adding a copyright notice to your pages.'),
  );
  return system_settings_form($form);
}

/**
 * Implementation of hook_form_alter().
 */
function elms_site_form_alter(&$form, &$form_state, $form_id) {
  // alter the version form
  if ($form_id == ELMS_GROUP_TYPE .'_node_form') {
    // because purl wants a url, generate a temporary, random one
    // this has to be done because the nid hasn't been set yet and we can't submit the node until we have a PURL identifier yet the NID is supposed to be part of the address, once submitted the node will automatically change thing
    if (arg(1) == 'add') {
      // set a random value initially
      $form['purl']['value']['#default_value'] = '_tmp_'. rand(1, 1000);
      // fill the default theme value if it exists
      if (variable_get('elms_helper_default_theme', 'chamfer') != variable_get('theme_default', '')) {
      $form['themes']['theme']['#default_value'] = variable_get('elms_helper_default_theme', 'chamfer');
      }
    }
    $form['#content_extra_fields']['spaces_preset']['weight'] = 8;
    // unset values that have been deselected
    $theme_ary = variable_get('elms_helper_disallowed_themes', array('cube'));
    $form_themes = $form['themes'];
    // remove description
    unset($form['og_description']);
    // remove non-theme defaults
    unset($form_themes['#type']);
    unset($form_themes['#title']);
    unset($form_themes['#description']);
    unset($form_themes['#collapsible']);
    unset($form_themes['#theme']);
    unset($form_themes['#weight']);
    unset($form_themes['theme']);
    foreach ($form_themes as $key => $theme) {
      if (in_array($theme['description']['#title'], $theme_ary)) {
        unset($form['themes'][$key]);
        unset($form['themes']['theme']['#options'][$key]);
      }
    }
    // account for space cloning
    if (arg(0) == 'spaces_og_clone') {
      // set a random value initially to work with workflow_purl
      $form['purl']['value']['#default_value'] = '_tmp_'. rand(1, 1000);
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function elms_site_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
  case 'insert':
    // check for groups created
    if (og_is_group_type($node->type)) {
    // set the theme variable defaults before we are strongarmed into this group
    $theme_ary = variable_get('theme_settings', array());
    $space = spaces_load('og', $node->nid, TRUE);
    if ($space) {
      // load the course node for the name space info
      if (!empty($node->field_parent_ref[0]['nid'])) {
        $parent = node_load($node->field_parent_ref[0]['nid']);
        $parent_name = $parent->title;
        $parent_title = $parent->field_parent_title[0]['value'];
      }
      else {
        // if this is a sandbox then there won't be a value here so use the node's
        $parent_name = $node->title;
      }
      $node->og_description = $node->title;
      // site the site name
      $space->controllers->variable->set('site_name', $parent_name);
      // establish default theme settings
      $space->controllers->variable->set('theme_settings', $theme_ary);
      // establish default theme settings for the selected theme
      $space->controllers->variable->set('theme_'. $node->og_theme .'_settings', $theme_ary);
      // turn on our default area as content
      // $space->controllers->variable->set('spaces_features', array('elms_content' => 1));
      // set some defaults for the version as they might not be set in the node form
      if (isset($node->default_version)) {
        $space->controllers->variable->set('spaces_preset_og', 'og_private');
        $node->og_private = 1;
      }
      // allow for modules to hook in and provide additional space logic here
      // this is because create_root function, if run, will exit insert logic
      drupal_alter('elms_site_access_routine', $space, $node);
      // build course root since all parents come with content by default
      // check for the default argument coming from the course creation form making a version
      if (module_exists('elms_content') && !isset($node->default_version) && !isset($node->spaces_og_clone)) {
        _elms_content_create_root($node, $node->elms_content_template);
      }
    }
  }
  case 'update':
    // allow custom access routines to interact here
    if (og_is_group_type($node->type)) {
      $space = spaces_load('og', $node->nid, TRUE);
      if ($space) {
        drupal_alter('elms_site_access_routine', $space, $node);
      }
    }
  break;
  break;
  case 'delete':
    // clean up all space overrides just to be safe
    if (og_is_group_type($node->type)) {
      db_query("DELETE FROM {spaces_overrides} WHERE id=%d", $node->nid);
    }
    break;
  }
}

/**
 * Implementation of hook_dashboard_requirements().
 */
function elms_site_dashboard_requirements($provider) {
  switch ($provider) {
  case 'og':
    $group = og_get_group_context();
    // add in the status from current workflow state
    $workflow_name = workflow_get_state_name($group->_workflow);
      $requirements['workflow_name'] = array(
        'title' => t('Status'),
        'value' => $workflow_name .' ('. l(t('Change workflow state'), 'node/'. $group->nid .'/workflow') .')',
        'severity' => REQUIREMENT_OK,
      );
    if ($group->field_section_semester[0]['value'] != '') {
        $offering_details .= $group->field_section_semester[0]['value'];
    }
    if ($group->field_section_year[0]['value'] != '') {
    $offering_details .= $group->field_section_year[0]['value'];
    }
    if ($group->field_campus[0]['value'] != '') {
    $offering_details .= $group->field_campus[0]['value'];
    }
    if ($group->field_section_number[0]['value'] != '') {
      $offering_details .= $group->field_section_number[0]['value']; 
    }
    if ($offering_details == '') {
      $sev = REQUIREMENT_ERROR;
    }
    else {
    $sev = REQUIREMENT_INFO;
    }
    $requirements['offering_details'] = array(
        'title' => t('Offering details'),
        'value' => $offering_details . '('. l(t('Change offering details'), 'node/'. $group->nid .'/edit') .')',
        'severity' => $sev,
      );
  break;
  case 'system':
      // add system level information
      $site_count = db_result(db_query("SELECT COUNT(nid) FROM {node} WHERE type='%s'", ELMS_GROUP_TYPE));
      $requirements['total_sites'] = array(
        'title' => t('Total sites'),
        'value' => $site_count,
        'severity' => REQUIREMENT_INFO,
      );
    break;
    case 'elms_parent':
    // get a high level version count
    $site_count = _elms_site_get_site_count(arg(1));
    if ($site_count == 0) {
      $site_warning = REQUIREMENT_WARNING;
    }
    else {
      $site_warning = REQUIREMENT_INFO;  
    }
    $requirements['site_count'] = array(
      'title' => t('# of Sites'), 
      'value' => $site_count,
      'severity' => $site_warning,
    );
    // get counts for all workflow states
    $states = workflow_get_states();
    // make a count of each workflow state if it's greater then 0
    foreach ($states as $sid => $state) {
    $count = _elms_site_get_site_count(arg(1), $sid);
    if ($count != 0) {
      $requirements['workflow_count_'. $sid] = array(
          'title' => t($state),
          'value' => $count,
          'severity' => REQUIREMENT_INFO,
        );
      }
    }
    break;
  }
  return $requirements;
}

// helper function to count number of versions for a course per workflow state
function _elms_site_get_site_count($nid, $sid = FALSE) {
  if ($sid) {
    $count = db_result(db_query("SELECT COUNT(n.nid) FROM {node} AS n JOIN {content_type_%s} as ctv ON n.nid=ctv.nid JOIN {workflow_node} AS wn ON wn.nid=n.nid WHERE type='%s' AND field_parent_ref_nid=%d AND wn.sid=%d", ELMS_GROUP_TYPE, ELMS_GROUP_TYPE, $nid, $sid));
  }
  else {
    $count = db_result(db_query("SELECT COUNT(n.nid) FROM {node} AS n JOIN {content_type_%s} as ctv ON n.nid=ctv.nid WHERE type='%s' AND field_parent_ref_nid=%d", ELMS_GROUP_TYPE, ELMS_GROUP_TYPE, $nid));
  }
  return $count;
}

/**
 * Implementation of hook_html_export_add_path_provider().
 */
function elms_site_html_export_add_path_provider() {
  $items = array(
    'elms_site' => array(
      'title' => 'ELMS: Site paths (front)',
      'callback' => '_elms_site_html_export_paths',
    ),
  );
  return $items;
}

/**
 * Callback for all paths for elms_sites provider.
 */
function _elms_site_html_export_paths() {
  // account for purl or addresses all bomb out
  $group = og_get_group_context();
  $base = '';
  if (isset($group->purl)) {
    $base = $group->purl .'/';
  }
  // provide paths that need to be loaded with this module enabled
  $paths = array(
    $base .'spaces-frontpage' => $base .'spaces-frontpage',
  );
  return $paths;
}