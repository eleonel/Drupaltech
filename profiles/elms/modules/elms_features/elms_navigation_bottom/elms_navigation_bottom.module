<?php

include_once('elms_navigation_bottom.features.inc');

// ELMS
// Copyright (C) 2011-2012  The Pennsylvania State University
//
// Bryan Ollendyke
// bto108@psu.edu
//
// Keith D. Bailey
// kdb163@psu.edu
//
// 12 Borland
// University Park,  PA 16802

/**
 * @file
 * Add a bottom bar region for ELMS
 */

/**
 * Implementation of hook_define_region().
 */
function elms_navigation_bottom_define_regions() {
  // implementation of the regions API
  $region['regions_elms_navigation_bottom'] = array(
    'title' => 'ELMS nav bottom',
    'js' => drupal_get_path('module', 'elms_navigation_bottom') .'/elms_navigation_bottom.js',
    'css' => drupal_get_path('module', 'elms_navigation_bottom') .'/elms_navigation_bottom.css',
    'render_callback' => '_elms_navigation_bottom_render_region',
  );
  return $region;
}

/**
 * Implementation of hook_init().
 */
function elms_navigation_bottom_init() {
  $settings = array(
    'elms_navigation_bottom' => array(
      'factor' => 1,
    )
  );
  drupal_add_js($settings, 'setting');
}

/**
 * Implementation of hook_block().
 */
function elms_navigation_bottom_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array(
      'info' => t('Page controls'),
      'weight' => 0,
      'status' => 0,
    );
    return $blocks;
  }
  elseif ($op == 'view') {
    switch ($delta) {
      case 0:
        $block['title'] = '<none>';
        $block['content'] = _elms_navigation_bottom_page_controls();
      break;
    }
    return $block;
  }
}

/**
 * Implementation of hook_regions_blocks_alter().
 */
function elms_navigation_bottom_regions_blocks_alter(&$blocks = array(), $region_name = NULL) {
  if ($region_name == 'regions_elms_navigation_bottom') {
    // Example to support HTML titles, with a safe but unorthodox workaround.
    foreach ($blocks as $key => $block) {
      $block->subject = filter_xss_admin(html_entity_decode($block->subject));
      $blocks[$key] = $block;
    }
  }
}


/**
 * Helper function for rendering the blocks in this region
 */
function _elms_navigation_bottom_render_region($block_html, $block) {
  // build a unique key for this block for theming
  static $count = 0;
  $count++;
  $key = $block->module .'_'. $block->delta;
  $output .= '<div class="regions_block regions_'. $count .'" id="regions_block_'. $key .'"><div class="regions_block_title">';
  $output .= $block->subject;
  $output .= '</div><div class="regions_block_content">'. $block->content .'</div></div>';
  // if we returned blocks then render the region
  if ($output != '') {
    return $output;
  }
}

// helper function to display page controls like book, print, and zoom
function _elms_navigation_bottom_page_controls() {
  $group = og_get_group_context();
  $has_items = FALSE;
  // if we're not in a group we can skip most of theses
  if (isset($group->nid)) {
    if (ctype_digit(arg(1))) {
      $output = '<div class="button_container">';
      $node = menu_get_object();
      // check for node reference url links
      $tmp_ref_links = nodereference_url_build_all_links($node, 0);
      // account for possible flags
      if (module_exists('flag')) {
        $flag_links = flag_link('node', $node);
        // if this has flags then render them here
        if (count($flag_links)) {
          foreach ($flag_links as $key => $flag) {
            $flagclass = $key;
            if (strpos($flag['title'], 'unflag-action')) {
              $flagclass .= '-flagged';
            }
            $output .= theme('menu_item', $flag['title'], 0, '', FALSE, $flagclass);
            $has_items = TRUE;
          }
        }
      }
      // see if we should display the page print
      if (module_exists('print')) {
        // weak check but if this is in a book then it can be printed in elms
        if (isset($node->book['bid'])) {
          $output .= theme('menu_item', l('', 'print/book/export/html/'. $node->nid, array('attributes' => array('title' => t('Print Page')))), 0, '', FALSE, 'elms_print_page');
          $has_items = TRUE;
        }
      }
      $output .= '</div><div class="button_container">';
      // if there is a previous page in this book, and its not the root, link
      if ($prev = book_prev($node->book)) {
        // make sure this isn't pointing to the root
        if ($prev['p2'] != 0) {
          $output .= theme('menu_item', l('', $prev['href'], array('attributes' => array('title' => t('Previous Page')))), 0, '', FALSE, 'elms_prev_page');
          $has_items = TRUE;
        }
        else {
          $output .= '<div class="empty_div_left"></div>';
        }
      }
      // if there is a next page in this book link to it
      if ($next = book_next($node->book)) {
        $output .= theme('menu_item', l('', $next['href'], array('attributes' => array('title' => t('Next Page')))), 0, '', FALSE, 'elms_next_page');
        $has_items = TRUE;
      }
      else {
        $output .= '<div class="empty_div_right"></div>';
      }
      $output .= '</div>';
    }
  }
  // scaling options, weird looking but needed for anchor trigger
  /*
  $output .= theme('menu_item', l('', '', array('fragment' => ' ', 'external' => TRUE, 'attributes' => array('title' => t('Scale Out')))), 0, '', FALSE, 'elms_zoom_out');
  $output .= theme('menu_item', l('', '', array('fragment' => ' ', 'external' => TRUE, 'attributes' => array('title' => t('Scale Page')))), 0, '', FALSE, 'elms_zoom_in');
  $output .= theme('menu_item', l('', '', array('fragment' => ' ', 'external' => TRUE, 'attributes' => array('title' => t('Reset Scale')))), 0, '', FALSE, 'elms_zoom_reset');
  */
  if ($has_items) {
    return $output;
  }
  else {
    return '';
  }
}