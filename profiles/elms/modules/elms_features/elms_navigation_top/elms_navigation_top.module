<?php
include_once('elms_navigation_top.features.inc');
// ELMS
// Copyright (C) 2011-2012  The Pennsylvania State University
//
// Bryan Ollendyke
// bto108@psu.edu
//
// Keith D. Bailey
// kdb163@psu.edu
//
// 12 Borland
// University Park,  PA 16802

/**
 * @file
 * Add a top bar region for ELMS
 */

/**
 * Implementation of hook_define_region().
 */
function elms_navigation_top_define_regions() {
  // implementation of the regions API
  $region['regions_elms_navigation_top'] = array(
    'title' => 'ELMS navigation top',
    'js' => drupal_get_path('module', 'elms_navigation_top') .'/elms_navigation_top.js',
    'css' => drupal_get_path('module', 'elms_navigation_top') .'/elms_navigation_top.css',
    'render_callback' => '_elms_navigation_top_render_region',
  );
  return $region;
}

/**
 * Implementation of hook_init().
 */
function elms_navigation_top_init() {
  $settings = array(
    'elms_navigation_top' => array(
      'msg_count' => array(),
    )
  );
  drupal_add_js($settings, 'setting');
}
/**
 * Implementation of hook_block().
 */
function elms_navigation_top_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    // define custom blocks for the new global breadcrumb, notifications area and user menu
    $blocks[0] = array(
      'info' => t('System path'),
      'weight' => 0,
      'status' => 0,
    );
    $blocks[1] = array(
      'info' => t('Notifications container'),
      'weight' => 0,
      'status' => 0,
    );
    $blocks[2] = array(
      'info' => t('Top nav user menu implementation'),
      'weight' => 0,
      'status' => 0,
    );
    return $blocks;
  }
  elseif ($op == 'view') {
    switch ($delta) {
      case 0:
        $block['title'] = '<none>';
        $block['content'] = _elms_navigation_top_system_path();
      break;
      case 1:
        $block = _elms_navigation_top_notifications();
        // if we got a title then bother adding the regions integration
      break;
      case 2:
        // only show menu options for logged in users
        global $user;
        if (!isset($user->uid) || $user->uid == 0 || $user->uid == '') {
          $block['title'] = l(t('Login'), 'user/login');
          $block['content'] = ' ';
        }
        else {
          // manually load the usermenu menu so we can inject a new title
          $block = module_invoke('menu', 'block', 'view', 'menu-usermenu');
          $rendername = '';
          // if the user has a custom picture then render it, otherwise render the default
          if ($user->picture != NULL) {
            $rendername .= theme('imagecache', 'elms_navigation_top', $user->picture, $user->name ."'s profile picture", "'s profile picture");
          }
          else {
            $rendername .= theme('imagecache', 'elms_navigation_top', variable_get('user_picture_default', ''), $user->name ."'s profile picture", "'s profile picture");    
          }
          // wrap name to offset it from the piture
          $rendername .= $user->name;
          $block['title'] = '<a href="#" title="'. $user->name ."'s menu".'">'. $rendername .'</a>';
        }
      break;
    }
    return $block;
  }
}

// helper function to display current system path
function _elms_navigation_top_system_path() {
  // check for the simpliest case, this is part of a group
  $group = og_get_group_context();
  if (isset($group->nid)) {
    // need to manually build the website's name and homepage because of strongarm being too good!
    $site_frontpage = unserialize(db_result(db_query("SELECT value FROM {variable} WHERE name='site_frontpage'")));
    $site_name = unserialize(db_result(db_query("SELECT value FROM {variable} WHERE name='site_name'")));
     /* $output = theme('menu_item', l(t($site_name), $site_frontpage, array('attributes' => array('title' => t('Home')), 'purl' => array('disabled' => TRUE))), 0);
    // add the course home if this version is part of a course
    if ($group->field_parent_ref[0]['nid'] != '') {
    $parent_name = db_result(db_query("SELECT title FROM {node} WHERE nid=%d", $group->field_parent_ref[0]['nid']));
      $output .= theme('menu_item', l(t($parent_name), 'node/'. $group->field_parent_ref[0]['nid'], array('attributes' => array('title' => t('Public Course Listing')), 'purl' => array('disabled' => TRUE))), 0);
    }*/
  // add the current group homepage to the trail
    $output .= theme('menu_item', l(t(variable_get('site_name', '')), variable_get('site_frontpage', 'node/'. $group->nid), array('attributes' => array('title' => t(variable_get('site_name', ''))))), 0);
  }
  else {
    // add the site name first
    $output = theme('menu_item', l(t(variable_get('site_name', '')), '<front>', array('attributes' => array('title' => t('System Home')), 'purl' => array('disabled' => TRUE))), 0);
    // see if we have a course node without loading the node
    $nid = arg(1);
    // verify this is an id
    if ($nid != '') {
      $type = db_result(db_query("SELECT type FROM {node} WHERE nid=%d", $nid));
    }
  }
  // unify everything that's not in the parents view
  if (arg(0) != 'parents') {
    // dig out current menu path based on whats active
    $active_menu = menu_set_active_trail();
    // pop off the home link
    if ($active_menu[0]['title'] == 'Home') {
      array_shift($active_menu);
    }
    // pop off content if its the first part of the path as its redundant
    if ($active_menu[0]['title'] == 'Content') {
      array_shift($active_menu);
    }
    // iterate each menu item and convert to valid breadcrumb
    foreach ($active_menu as $menu) {
      if (isset($menu['link_path'])) {
        $output .= theme('menu_item', l(t($menu['title']), $menu['link_path'], array('attributes' => array('title' => t($menu['title'])))), 0);
      }
      else {
        $output .= theme('menu_item', l(t($menu['title']), $menu['href'], array('attributes' => array('title' => t($menu['title'])))), 0);
      }
    }
  }
  return $output;
}

/**
 * Helper function to retrieves system messages.
 */
function _elms_navigation_top_notifications() {
  $block = array('content' => ' ', 'title' => ' ');
  global $user;
  // get all messages and unset them for the session
  if ($user->uid == 1) {
    $messages = drupal_get_messages(NULL, FALSE);
  }
  elseif (arg(2) == 'edit') {
    $messages = drupal_get_messages(NULL, FALSE);
  }
  else {
    $messages = drupal_get_messages();
  }
  // need a separater container for title mapping
  $title_messages = $messages;
  if (!empty($messages)) {    
    $content = '';
    // get a map of all known values
    $map = _elms_navigation_top_get_map();
    // account for parent items which reduces redundancy in the UI
    foreach ($title_messages as $key => $message_group) {
      // if this item actually has a parent, move it's status messages in there
      if (isset($map[$key]['parent'])) {
        // test to see if this item came across itself to merge under, otherwise 
        if (isset($title_messages[$map[$key]['parent']])) {
          $title_messages[$map[$key]['parent']] = array_merge($title_messages[$map[$key]['parent']], $message_group);
        }
        else {
          // this is basically just a push of the value into its parent
          $title_messages[$map[$key]['parent']] = $message_group;
        }
        unset($title_messages[$key]);
      }
    }
    // build out the title bar
    foreach ($title_messages as $key => $message_group) {
      // see if we have a map, if not use default
      if (isset($map[$key])) {
        $type = $key;
      }
      else {
        $type = 'default';
      }
      // if there are multiple messages then place a count indicator
      $msg_count = '';
      if (count($message_group) > 1) {
        $msg_count = '<div class="elms_nav_top_msg_bar_icon_count">'. count($message_group) .'</div>';
      }
      // block title as icons
      $title .= '<div class="elms_nav_top_msg_bar_icon"><a href="#" title="'. $map[$type]['title'] .', click for more details"><img src="'. $map[$type]['bar_icon'] .'" title="'. $map[$type]['title'] .', click for more details" alt="'. $map[$type]['title'] .', click for more details" /></a>'. $msg_count .'</div>';
    }
    // build out the message array
    foreach ($messages as $key => $message_group) {
      // see if we have a map, if not use default
      if (isset($map[$key])) {
        $type = $key;
      }
      else {
        $type = 'default';
      }
      // loop through as messages are grouped by type
      foreach ($message_group as $message) {
        // block content area
        $content .= '<div class="elms_nav_top_row"><img src="'. $map[$type]['icon'] .'" title="'. $map[$type]['title'] .', click for more details" alt="'. $map[$type]['title'] .', click for more details" class="elms_nav_top_icon"/><div class="elms_nav_top_msg"><div class="elms_nav_top_msg_title">'. $map[$type]['title'] .'</div><div class="elms_nav_top_msg_text">'. $message .'</div></div></div>';
      }
    }
    // add arrow to right side to indicate this can be opened
    $title .= '<a href="#" title="Click to see notifications"><img src="'. base_path() . drupal_get_path('module', 'elms_navigation_top') .'/images/notifications/arrow_down.png" alt="Click to see notifications" class="elms_nav_top_arrow"/></a>';
    // construct the block for display
    $block = array('subject' => $title, 'content' => $content);
  }
  return $block;
}

/**
 * Implementation of hook_map_notification().
 */
function elms_navigation_top_map_notification() {
  // provide defaults for drupal
  $map = array(
    'default' => array(
      'title' => 'Message',
      'icon' => base_path() . drupal_get_path('module', 'elms_navigation_top') .'/images/notifications/default.png',
      'bar_icon' => base_path() . drupal_get_path('module', 'elms_navigation_top') .'/images/notifications/default_bar.png',
    ),
    'status' => array(
      'title' => 'Status',
      'icon' => base_path() . drupal_get_path('module', 'elms_navigation_top') .'/images/notifications/status.png',
      'bar_icon' => base_path() . drupal_get_path('module', 'elms_navigation_top') .'/images/notifications/status_bar.png',
    ),
    'warning' => array(
      'title' => 'Warning',
      'icon' => base_path() . drupal_get_path('module', 'elms_navigation_top') .'/images/notifications/warning.png',
      'bar_icon' => base_path() . drupal_get_path('module', 'elms_navigation_top') .'/images/notifications/warning_bar.png',
    ),
    'error' => array(
      'title' => 'Error',
      'icon' => base_path() . drupal_get_path('module', 'elms_navigation_top') .'/images/notifications/error.png',
      'bar_icon' => base_path() . drupal_get_path('module', 'elms_navigation_top') .'/images/notifications/error_bar.png',
    ),
  );
  return $map;
}

// helper function that builds the notifications map
function _elms_navigation_top_get_map() {
  $map = module_invoke_all('map_notification');
  return $map;
}


/**
 * Implementation of hook_regions_region_alter().
 */
function elms_navigation_top_regions_region_alter(&$region, $region_name) {
  // Example to add an inner DIV to the region markup.
  if ($region_name == 'regions_elms_navigation_top' && !empty($region['blocks'])) {
    $new_markup = array(
      'start' => $region['start'],
      'inner' => '<div class="regions_pre_block_container"></div><div class="regions_block_container">',
      'blocks' => $region['blocks'],
      'inner_end' => '</div><div class="regions_post_block_container"></div>',
      'end' => $region['end'],
    );
    $region = $new_markup;
  }
}

/**
 * Implementation of hook_regions_blocks_alter().
 */
function elms_navigation_top_regions_blocks_alter(&$blocks = array(), $region_name = NULL) {
  if ($region_name == 'regions_elms_navigation_top') {
    // Example to support HTML titles, with a safe but unorthodox workaround.
    foreach ($blocks as $key => $block) {
      $block->subject = filter_xss_admin(html_entity_decode($block->subject));
      $blocks[$key] = $block;
    }
  }
}


/**
 * Helper function for rendering the blocks in this region
 */
function _elms_navigation_top_render_region($block_html, $block) {
  // build a unique key for this block for theming
  static $count = 0;
  $count++;
  $key = $block->module .'_'. $block->delta;
  $output .= '<div class="regions_block regions_'. $count .'" id="regions_block_'. $key .'"><div class="regions_block_title">';
  $output .= $block->subject;
  $output .= '</div><div class="regions_block_content">'. $block->content .'</div></div>';
  // if we returned blocks then render the region
  if ($output != '') {
    return $output;
  }
}