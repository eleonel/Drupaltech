<?php

include_once('elms_user_management.features.inc');

/**
 * Implementation of hook_perm().
 */
function elms_user_management_perm() {
  return array('use elms user management', 'edit elms user management');
}

/**
 * Implementation of hook_menu().
 */
function elms_user_management_menu() {
  $items['elms_site_admin/user_management'] = array(
    'title' => 'User management',
    'description' => "All user management options for this site",
    'weight' => -20,
    'access callback' => '_elms_user_management_admin_access',
    'access arguments' => array(),
    'page callback' => 'elms_user_management_settings_overview',
    'file' => 'elms_user_management.admin.inc',
  );
  $items['elms_site_admin/user_management/add'] = array(
    'title' => 'Add user',
    'description' => 'Add a user to this site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('elms_user_management_user_form'),
    'file' => 'elms_user_management.admin.inc',
    'access arguments' => array('use elms user management'),
  );
  $items['elms_site_admin/user_management/drop'] = array(
    'title' => 'Drop user',
    'description' => 'Drop a user from this site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('elms_user_management_user_form_drop'),
    'file' => 'elms_user_management.admin.inc',
    'access arguments' => array('use elms user management'),
  );
  $items['elms_site_admin/user_management/roster'] = array(
    'title' => 'Roster',
    'description' => 'View the roster for this site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('elms_user_management_view_roster'),
    'access arguments' => array('use elms user management'),
    'file' => 'elms_user_management.admin.inc',
  );
  $items['elms_site_admin/user_management/xml_import'] = array(
    'title' => 'XML Import',
    'description' => 'Import users from an XML feed',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('elms_user_management_xml_import'),
    'access arguments' => array('use elms user management'),
    'file' => 'elms_user_management.admin.inc',
  );
  $items['elms_site_admin/user_management/file_import'] = array(
    'title' => 'CSV Import',
    'description' => 'Import users from a CSV file',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('elms_user_management_file_import'),
    'access arguments' => array('use elms user management'),
    'file' => 'elms_user_management.admin.inc',
  );
  $items['admin/elms/user_management'] = array(
    'title' => 'User management',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('elms_user_management_admin_form'),
    'access arguments' => array('edit elms user management'),
    'file' => 'elms_user_management.admin.inc',
  );
  return $items;
}

/**
 * Callback for access.
 */
function _elms_user_management_admin_access() {
  $group = og_get_group_context();
  return (og_is_group_admin($group) || user_access('administer site configuration'));
}

/**
 * Create user
 *
 * @param array $edit
 *   Values in format accepted by user_save().
 *   Required values:
 *   $edit['name']
 *   $edit['mail']
 */
function elms_user_management_user_create($edit) {
  // Send in the language in which the user is viewing the site.
  global $language;
  global $user;
  // allow other projects to act on elms user object if needed
  drupal_alter('elms_user_create', $edit);
  // Sanitize the $params array which will get sent to drupal_mail.
  $params = array();
  // Define who the mail will be sent from.
  $from = variable_get('site_mail', ini_get('sendmail_from'));
  // Create account.
  $account = new stdClass();
  $password = user_password();
  $edit['pass'] = $password;
  $edit['status'] = 1;
  $edit['init'] = $user->mail;
  $group = og_get_group_context();
  // store roles for use in og
  // $og_roles = $edit['roles'];
  // unset authenticated as that'll be global
  // unset($og_roles[2]);
  // only give global role of authenticated
  // $edit['roles'] = array(2 => 2);
  $account = user_save($account, $edit);
  // Notify user if successful.
  if ($account->uid) {
    // add the contextual user role(s)
    og_save_subscription($group->nid, $account->uid, array('is_active' => 1));
    // foreach ($og_roles as $rid) {
      // og_user_roles_role_add($group->nid, $account->uid, $rid);
    // }
    drupal_set_message(t('You have created an account for !name. The username and password have been sent along with log in instructions to the e-mail address !email.', array('!name' => $edit['name'], '!email' => l($edit['mail'], 'mailto:'. $edit['mail']))));

    $params['subject'] = t('[!site_name] We have created an account for you', array('!site_name' => variable_get('site_name', 'Drupal')));
    $variables = array(
      '!name' => $edit['name'],
      '!site' => variable_get('site_name', 'Drupal'),
      '!login_url' => user_pass_reset_url($account) .'/login',
      '!url' => trim(url('<front>', array('absolute' => TRUE)), '/'),
      '!password' => $password,
      );
    if (trim($edit['welcome_message_body'])) {
      $body .= $edit['welcome_message_body'];
      $body .= "\n\n================================================\n";
    }
    else {
      $body .= t("\nHello !name,\n", $variables);
    }
    // @todo: Would love to use one time login link here - alas it is only valid for 24 hrs and needs to be renewed then.
    $body .= t("\nWe have created an account for you on !site\n!url.\n\nYou can log in to the site with the following username and password\n\n!name\n!password\n\nPlease change your password after the first time you log in.\n\nWelcome to !site", $variables);
    // Put the completed $body in the $params array for hook_mail
    $params['body'] = $body;
    if (!drupal_mail('elms_user_management', 'elms_user_management-create', $edit['mail'], $language, $params, $from)) {
      drupal_set_message(t('Error sending notification mail to user.'), 'error');
    }
  }
  else {
    drupal_set_message(t('Error creating user.'), 'error');
  }
  return $account;
}

/**
 * Implementation of hook_mail().
 */
function elms_user_management_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];
}
