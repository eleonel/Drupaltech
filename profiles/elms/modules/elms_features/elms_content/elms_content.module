<?php

include_once('elms_content.features.inc');

/**
 * Implementation of hook_nodeapi().
 */
function elms_content_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'load':
    // for group nodes, load in the ID of the book outline
    if (og_is_group_type($node->type)) {
    // there's only 1 book per group so load the id and store it in the node object
    // also store the outline mlid to avoid duplicate querying in the future
      $result = db_query("SELECT mlid,{book}.nid FROM {og_ancestry} JOIN {book} ON {book}.nid = {og_ancestry}.nid WHERE {book}.nid = {book}.bid AND group_nid=%d", $node->nid);
      $val = db_fetch_array($result);
      $node->book_outline_mlid = $val['mlid'];
      $node->book_nid = $val['nid'];
    }
    break;
    case 'view':
    // for referenced nodes we want to populate the content with the other node's body
    if ($node->type == 'referenced_page') {
    if (is_numeric($node->field_reference_page[0]['nid'])) {
      $ref_node = node_load($node->field_reference_page[0]['nid']);
      $node->content['body']['#value'] = $ref_node->body;
    }
    }
  break;
  }
}


/**
 * Implementation of (undocumented) hook_theme_registry_alter().
 */
function elms_content_theme_registry_alter(&$vars) {
  // alter the way book nav functions
  $vars['book_navigation']['theme path'] = drupal_get_path('module', 'elms_content');
  $vars['book_navigation']['path'] = drupal_get_path('module', 'elms_content');
  $vars['book_navigation']['theme paths'] = array(0 => drupal_get_path('module', 'elms_content'));
}

/**
 * Implementation of hook_init().
 */
function elms_content_init() {
  drupal_add_css(drupal_get_path('module', 'elms_content') .'/css/style.css', 'theme');
}

/**
 * Implementation of hook_menu().
 */
function elms_content_menu() {
  $items = array();
  $items['elms_content'] = array(
    'page callback' => '_elms_content_root',
    'access callback' => 'spaces_access_feature',
    'access arguments' => array('view', 'elms_content'),
    'type' => MENU_CALLBACK,
    'file' => 'elms_content.pages.inc',
  );

  return $items;
}

// helper function for access verification of settings page
function _elms_content_access_check() {
  // make sure the feature is activated
  if (spaces_access_feature('view', 'elms_content')) {
    return user_access('manage features');
  }
  return 0;
}

// helper function for access verification of settings page, as admin
function _elms_content_access_check_admin() {
  // make sure the feature is activated
  if (spaces_access_feature('view', 'elms_content')) {
    return user_access('spaces_access_admin');
  }
  return 0;
}

/**
 * Implementation of hook_block().
 */
function elms_content_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array(
      'info' => t('ELMS content nav'),
      'weight' => -10,
      'status' => 0,
    );
    return $blocks;
  }
  elseif ($op == 'view') {
    switch ($delta) {
      case 0:
      // account for non-node pages, make sure feature is turned on
      if (spaces_access_feature('view', 'elms_content')) {
      $group = og_get_group_context();
      if (isset($group->nid)) {
        // if this is a node, load it
        if (arg(0) == 'node' && is_numeric(arg(1)) && arg(1) != $group->nid) {
          $node = menu_get_object();
          if (isset($node->book)) {
            $block = module_invoke('book', 'block', 'view', 0);
          }
        }
        // if it wasn't a node page, load the highest level manually
        if (!isset($block['content'])) {
          $node = node_load($group->book_nid);
          $tree = menu_tree_all_data($node->book['menu_name'], $node->book);
          // There should only be one element at the top level.
          $data = array_shift($tree);
          $block['content'] = ($data['below']) ? menu_tree_output($data['below']) : '';
        }
        $block['subject'] = t('Content outline');
        $block['title'] = t('Content outline');
      }
      }
      break;
    }
    return $block;
  }
}

/**
 * Implementation of hook_link_alter().
 */
function elms_content_link_alter(&$links, $node, $comment = NULL) {
  // check print setting
  $print_option = variable_get('elms_print_options', 'both');
  if ($print_option == 'none') {
    unset($links['book_printer']);
  }
}

// helper function for how we render the pager navigation
function _elms_content_toc($bid, $exclude = array(), $depth_limit = 10) {
    $tree = menu_tree_all_data(book_menu_name($bid));
    $header = array(t('Table of contents'));
  $toc = array();
    _elms_content_toc_recurse($tree, $toc, $exclude, $depth_limit);
    array_shift($toc);
  return theme('table', $header, $toc, array('id' => 'course-outline'));
}

// helper function for looping through a tree to build out the display
function _elms_content_toc_recurse($tree, &$toc, $exclude, $depth_limit) {
  foreach ($tree as $data) {
    if ($data['link']['depth'] > $depth_limit) {
      // Don't iterate through any links on this level.
      break;
    }
    if (!in_array($data['link']['mlid'], $exclude)) {
      $toc[] = array('data' => array(theme('indentation', $data['link']['depth']) . l(t($data['link']['title']), $data['link']['href'])));
      if ($data['below']) {
        _elms_content_toc_recurse($data['below'], $toc, $exclude, $depth_limit);
      }
    }
  }
}

// helper function to create a book for a site and populate it based on preset chosen
function _elms_content_create_root($group, $template = NULL) {
  global $user;
  // creating a blank node
  $node = new stdClass();
  $node->uid = $user->uid;
  $node->type = 'page';
  $node->status = 1;
  $node->log = 'ELMS outline root created';
  $node->revision = 1;
  $node->book['mlid'] = NULL;
  $node->title = 'Content';
  // settings based on group context in ELMS
  // set group association
  $node->og_groups = array($group->nid => $group->nid);
  $node->og_groups_both = array($group->nid => $group->title);
  // save the book root
  node_save($node);
  // set book outline association automatically
  $node->book['bid'] = $node->nid;
  $node->book['menu_name'] = book_menu_name($node->book['bid']);
  $node->book['module'] = 'book';
  // update outline for new book
  _book_update_outline($node);
  // see if we were passed an instructional template to use, should be
  if ($template != NULL) {
    $id_template = _book_outline_builder_get_site_template($template);
    // start the recursive loop
    _book_outline_builder_build_node_structure($id_template, $node->book['bid'], $node->book['mlid'], array('group' => $group));
  }
  watchdog('elms', 'New book outline created for the site');
}




/**
 * Implementation of hook_book_outline_builder_template_alter().
 */
function elms_content_book_outline_builder_template_alter(&$templates) {
  // alter the default template so that it's in an elms context
  $templates['default'] = array(
    'title' => 'Default outline',
    array(
      'type' => 'page',
      'title' => 'Lesson @i',
      'duplicate' => TRUE,
      'children' => array(
        array(
          'type' => 'page',
          'title' => 'Introduction',
        ),
        array(
          'type' => 'page',
          'title' => 'Content',
        ),
      ),
    ),
  );
}

/**
 * Implementation of hook_book_outline_builder_loop_alter().
 */
function elms_content_book_outline_builder_loop_alter(&$loop, $book_item, $additional_parms) {
  // anything set to true in the API responds to the lesson count set
  if ($book_item['duplicate'] === TRUE) {
    // use the included lesson count
    $loop = $additional_parms['group']->elms_content_template_i_count;
  }
}

/**
 * Implementation of hook_book_outline_builder_node_alter().
 */
function elms_content_book_outline_builder_node_alter(&$node, $book_item, $additional_parms) {
  // dset the group based on current group being loaded into
  $group = $additional_parms['group'];
  $node->og_groups = array($group->nid => $group->nid);
  $node->og_groups_both = array($group->nid => $group->title);
}

/**
 * adds target of the book associated to this feature
 */
function elms_content_feeds_node_processor_targets_alter(&$targets, $content_type) {
  $targets['elms_book'] = array(
    'name' => t('ELMS book root'),
    'description' => t('Associate node to ELMS Content book node'),
    'callback' => 'elms_content_feeds_set_elms_book_target',
  );
}
/**
 * Set the book to the group context
 */
function elms_content_feeds_set_elms_book_target($node, $target, $value) {
  // we know in ELMS there is only 1 book for the group
  $group = og_get_group_context();
  // set the book root as the group's global book
  $node->book['bid'] = $group->book_nid;
  return $node;
}

/**
 * Implementation of hook_dashboard_requirements().
 */
function elms_content_dashboard_requirements($provider) {
  switch ($provider) {
    case 'og':
      // list of active features
      $group = og_get_group_context();
      $active_features = variable_get('spaces_features', array());
      // see if this feature is active
      // loop through and list all features and their status
      if (isset($active_features['elms_content']) && $active_features['elms_content'] == 1) {
        $requirements['elms_content'] = array(
          'title' => t('ELMS content feature'),
          'value' => t('Active'),
          'severity' => REQUIREMENT_OK,
        );
        $content_count = db_result(db_query("SELECT COUNT(n.nid) FROM {node} AS n JOIN {og_ancestry} AS oga ON n.nid=oga.nid WHERE group_nid=%d AND type IN('page', 'reference_page')", $group->nid));
        $requirements['content_count'] = array(
          'title' => t('Total content'),
          'value' => $content_count,
          'severity' => REQUIREMENT_INFO,
        );
      $page_count = db_result(db_query("SELECT COUNT(n.nid) FROM {node} AS n JOIN {og_ancestry} AS oga ON n.nid=oga.nid WHERE group_nid=%d AND type='page'", $group->nid));
        $requirements['page_count'] = array(
          'title' => t('Total pages'),
          'value' => $page_count,
          'severity' => REQUIREMENT_INFO,
        );
      $reference_count = db_result(db_query("SELECT COUNT(n.nid) FROM {node} AS n JOIN {og_ancestry} AS oga ON n.nid=oga.nid WHERE group_nid=%d AND type='reference_page'", $group->nid));
        $requirements['reference_count'] = array(
          'title' => t('Total reference pages'),
          'value' => $reference_count,
          'severity' => REQUIREMENT_INFO,
        );
      }
    else {
      $requirements['elms_content'] = array(
        'title' => t('ELMS content feature'),
        'value' => t('Inactive'),
        'severity' => REQUIREMENT_WARNING,
      );
    }
    break;
  case 'system':
      // add system level information
      $content_count = db_result(db_query("SELECT COUNT(nid) FROM {node} WHERE type IN('page', 'reference_page')"));
      $requirements['content_count'] = array(
        'title' => t('Total content'),
        'value' => $content_count,
        'severity' => REQUIREMENT_INFO,
      );
      $page_count = db_result(db_query("SELECT COUNT(nid) FROM {node} WHERE type='page'"));
      $requirements['page_count'] = array(
        'title' => t('Total pages'),
        'value' => $page_count,
        'severity' => REQUIREMENT_INFO,
      );
      $reference_count = db_result(db_query("SELECT COUNT(nid) FROM {node} WHERE type='reference_page'"));
      $requirements['reference_count'] = array(
        'title' => t('Total reference pages'),
        'value' => $reference_count,
        'severity' => REQUIREMENT_INFO,
      );
    break;
  }
  return $requirements;
}

/**
 * Implementation of hook_form_alter().
 */
function elms_content_form_alter(&$form, &$form_state, $form_id) {
  // alter the site form only when adding a new site
  if ($form_id == ELMS_GROUP_TYPE .'_node_form' && arg(1) == 'add') {
    $form['elms_content'] = array(
      '#type' => 'fieldset',
      '#title' => 'Content template',
      '#collapsed' => FALSE,
      '#collapsible' => TRUE,
      '#weight' => 10,
    );
    $form['elms_content']['elms_content_template'] = array(
      '#options' => _book_outline_builder_get_site_template(),
      '#title' => 'Content outline template',
      '#description' => 'Utilize a pre-built outline to rapidly create content structures.',
      '#type' => 'select',
    );
    $form['elms_content']['elms_content_template_i_count'] = array(
      '#title' => 'Lessons',
      '#type' => 'select',
      '#options' => array(1 => 1, 2 => 2, 3 => 3, 4 => 4, 5 => 5, 6 => 6, 7 => 7, 8 => 8, 9 => 9, 10 => 10, 11 => 11, 12 => 12, 13 => 13, 14 => 14, 15 => 15),
    );
  }
}

/**
 * Implementation of hook_ckeditor_link_autocomplete_alter().
 */
function elms_content_ckeditor_link_autocomplete_alter(&$results, $string) {
  $results = array();
  // get current node to exclude self linking
  $nid = arg(1);
  // get current group to keep results in context
  $group = og_get_group_context();
  if ($string !== '') {
    // select anything that's in this group, not this page, and not a book root
    $sql = db_rewrite_sql("SELECT n.nid, n.title FROM {node} n JOIN {og_ancestry} og ON og.nid = n.nid JOIN {book} b ON b.nid=n.nid WHERE b.nid<>b.bid AND n.nid<>%d AND og.group_nid=%d AND n.title LIKE '%%%s%%' ORDER BY n.title, n.type");
    // only return 10 items
    $result = db_query_range($sql, array($nid, $group->nid, $string), 0, 10);
    while ($node = db_fetch_object($result)) {
      $results['node/'. $node->nid] = check_plain($node->title);
    }
  }

  return $results;
}
